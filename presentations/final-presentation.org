#+OPTIONS: ':nil *:t -:t ::t <:t H:2 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:nil e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:nil title:t toc:nil todo:t |:t
#+TITLE: Secure Calling Convention with Uninitialized Capabilities
#+DATE: 04-12-19
#+AUTHOR: Sander Huyghebaert \linebreak Promotor: Prof. Dr. Dominique Devriese \linebreak Supervisor: Thomas Van Strydonck \linebreak Supervisor: Dr. Steven Keuchel
#+EMAIL: sander.huyghebaert@vub.be
#+DESCRIPTION: Final Thesis Presentation
#+LATEX_CLASS: beamer
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{color}
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.3 (Org mode 9.1.9)
# No Navigation Symbols
#+BEAMER_HEADER: \setbeamertemplate{navigation symbols}{}
#+BEAMER_HEADER: \usetheme[coloredtitles]{vub}
#+BEAMER_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Outline}\tableofcontents[currentsection]\end{frame}}
#+MACRO: subtitle #+BEAMER: \framesubtitle{$1}
#+MACRO: samepagenr #+BEAMER: \addtocounter{framenumber}{-1}

* Introduction
** Pointers
   #+ATTR_LATEX: :width 0.5\textwidth
   [[../figures/pointer.png]]

   # Mention "undefined behavior" in C spec for pointers
   - No Bounds
   - No Permissions
     
** Calling Convention with Pointers
   #+CAPTION: Stack at some point of a program
   #+ATTR_LATEX: :width 0.65\textwidth
   [[../figures/pointer-secret-on-stack-1.png]]

** Calling Convention with Pointers
   {{{samepagenr}}}
   #+CAPTION: Stack after calling a function 
   #+ATTR_LATEX: :width 0.65\textwidth
   [[../figures/pointer-secret-on-stack-init.png]]

** Calling Convention with Pointers
   {{{samepagenr}}}
   #+CAPTION: Callee returns
   #+ATTR_LATEX: :width 0.65\textwidth
   [[../figures/pointer-secret-on-stack-1.png]]

** Calling Convention with Pointers
   {{{samepagenr}}}
   #+CAPTION: Caller invokes untrusted function
   #+ATTR_LATEX: :width 0.65\textwidth
   [[../figures/pointer-secret-on-stack-sp-secret.png]]

** Capability Machines
   #+CAPTION: Capability for a region of memory
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/capability.png]]
   
   - Bounds
   - Permissions
   
** CHERI
   - Capability extension to Instruction Set Architectures
   - Hardware implementation
     + Capability instructions
   - Backwards compatibility
   - Software stack
     + CLang/LLVM, CHERIBSD, QEMU Emulator
   
# Explain concepts used throughout thesis (for CCs)
** Well-Bracketed Control Flow
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/wbcf-1.png]]

** Well-Bracketed Control Flow
   {{{samepagenr}}}
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/wbcf-2.png]]

** Well-Bracketed Control Flow
   {{{samepagenr}}}
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/wbcf-3.png]]

** Well-Bracketed Control Flow
   {{{samepagenr}}}
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/wbcf-4.png]]

** Well-Bracketed Control Flow
   {{{samepagenr}}}
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/wbcf-5.png]]
   
** Local State Encapsulation
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/lse-1.png]]

** Local State Encapsulation
   {{{samepagenr}}}
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/lse-2.png]]

** Local State Encapsulation
   {{{samepagenr}}}
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/lse-3.png]]
   
* Calling Convention
** CHERI-MIPS Calling Convention
   
** Calling Convention with Local Capabilities
   # Cite Lau's paper
   # WBCF & LSE
   # Open problem => stack clearing
   # First attempt => linear caps (small description, hardware limitation)
   
* Uninitialized Capabilities
** Uninitialized Capabilities
   {{{subtitle(Concept)}}}
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/uninit-cap-concept-v2.png]]
   # MENTION: Reflects stack growth

** Uninitialized Capabilities
   {{{subtitle(Concept)}}}
   {{{samepagenr}}}
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/uninit-cap-concept-v2-pre-write.png]]

** Uninitialized Capabilities
   {{{subtitle(Concept)}}}
   {{{samepagenr}}}
   #+ATTR_LATEX: :width 0.7\textwidth
   [[../figures/uninit-cap-concept-v2-post-write.png]]
   
** Uninitialized Capabilities
   {{{subtitle(Implementation Overview: Permission Bit)}}}
   #+ATTR_LATEX: :width 0.8\textwidth
   [[../figures/original-cap-representation.png]]

** Uninitialized Capabilities
   {{{subtitle(Implementation Overview: Permission Bit)}}}
   {{{samepagenr}}}
   #+ATTR_LATEX: :width 0.8\textwidth
   [[../figures/uninit-cap-representation.png]]

# TODO: if more time is left after practicing presentation, add some examples slides,
#       for example for the "shrink a capability" instruction
# TODO: showcase a store instruction? (sail code)
** Uninitialized Capabilities
   {{{subtitle(Implementation Overview: Instruction Modifications)}}}
   - Load Instructions
     + Uninitialized capabilities cannot load if $address < cursor$
     + CL[BHWD][U], CLC
   - Instructions that modify the cursor
     + Only store right below cursor can modify the cursor of an uninitialized capability
     + CSetOffset, CIncOffset, CSetAddr, CAndAddr

** Uninitialized Capabilities
   {{{subtitle(Implementation Overview: New Instructions)}}}
   - Uninitialized Permission Bit
     + Get, Set and Drop
     # MENTION: what is the "drop" instr and why is it useful
   - Uninitialized Store Instructions
   - Shrink a Capability
     # MENTION: what is it + implemented for technical reasons
   
* Secure Calling Convention
** Secure Calling Convention with Uninitialized Capabilities
  # Based on cc with local caps
  # Example (reuse, but better align, figures of previous presentation)
  # WBCF & LSE
  
* Assembler
** Assembler
   
* Evaluation
** Evaluation
   {{{subtitle(Unit Testing Instructions)}}}
   #+ATTR_LATEX: :width 0.9\textwidth
   [[../figures/evaluation-unit-testing.png]]
   # MENTION: uses CHERITest infrastructure
   # MENTION: simulator output file contains register dump

** Evaluation
   {{{subtitle(Setup)}}}
   #+ATTR_LATEX: :width 0.9\textwidth
   [[../figures/evaluation-setup.png]]

** Evaluation
   {{{subtitle(Experiments)}}}
   # MENTION: 3 with -O0, 2 with -O1
   - 5 C Programs
     + Function calls
     + Arrays
     + Pointer arithmetic
   - Semantics Preserved
   - Measure execution time 
   # MENTION: can be extracted from simulator output file
   - Number of instructions
   
** Evaluation
   {{{subtitle(Results)}}}
   - Unit Tests Pass
   - Semantics are preserved
   - Overhead for /secure/ calling convention
     + Expected, depends on stack frame sizes
   - Number of instructions doubles for /secure/ calling convention
   
* Future Work
** Future Work 
   {{{subtitle(Hardware Implementation)}}}
   - Should be possible
     + Uninitialized Capabilities only require one extra bit
     + New instructions similar to existing instructions
   - Out of scope of thesis

** Future Work 
   {{{subtitle(CLang/LLVM)}}}
   - Calling Convention currently not implemented in Clang/LLVM...
   - ... but exploration of Clang/LLVM compiler for calling convention provided in thesis
   # CLang Exploration provided in thesis (don't go into detail, very technical)

* Conclusions
** Conclusions
   - Uninitialized Capabilities
     + Semantics
     + ISA Extension
       - Instantiated for CHERI-MIPS
   - Calling Convention
     + Enforces WBCF and LSE
     + Security comes at a cost (overhead)
   - Exploration of Clang/LLVM compiler
     + To implement new calling convention
