* Uninitialized Capabilities
  Uninitialized capabilities are a new type of capabilities, which represent the authority to
  only read those parts of memory to which has been written first using the uninitialized
  capability. This type of capability requires a new permission to be added to capabilities 
  (*U*: uninitialized) and prevents the holder of the capability from reading memory that was not 
  initialized. The following figure clarifies this concept a bit more:

  #+CAPTION: Uninitialized Capabilities Concept
  #+ATTR_LATEX: :width 0.5\textwidth
  #+NAME: fig-uninit-cap-concept
  [[../../figures/uninit-cap-concept-v2.png]]
  \FloatBarrier

  Formally, uninitialized capabilities grant the following authority:
  - permission to read in [cursor, end];
  - permission to write in [base, end];
  - when writing on the cursor, it will move the cursor so that the holder of the 
    uninitialized capability is able to read from the location it has just written to.
   
  Uninitialized capabilities can thus be used to gives access to arrays that contain uninitialized 
  data without the need of clearing that uninitialized data.
  
  The full set of permissions becomes:
  - *R*: read-only;
  - *RW*: read-write;
  - *RX*: read-execute;
  - *RWX*: read-write-execute.
  - *UR*: read-only between [cursor, end];
  - *URW*: the *RW* permissions have no effect, the *U* permission is more strict and only
	   allows read-write as specified above;
  - *URX*: read-execute between [cursor, end];
  - *URWX*: just as for the *URW* permissions, the *U* permissions is more strict so the rules
	    for uninitialized capabilities are followed.

  We provide a concrete implementation of uninitialized capabilities for the /CHERI/ capability 
  machine.

** CHERI
   CHERI (\textbf{C}apability \textbf{H}ardware \textbf{E}nhanced \textbf{R}ISC \textbf{I}nstructions) 
   is an ISA extension that  introduces capabilities. The main goals of CHERI are 
   fine-grained memory protection, software compartmentalization and backwards compatibility \parencite{watson2019capability}.
   
   The CHERI ISA extension proposes a 64-bit, 128-bit and 256-bit capability representation format\parencite{watson2019capability}, 
   we have implemented our ideas for the 256-bit capability format but it should be possible to 
   add the uninitialized permission bit to other formats as well.
   
   In the following figure we see the current 256-bit capability format:

   #+CAPTION: 256-bit Capability Representation Format
   #+ATTR_LATEX: :width 0.8\textwidth
   #+NAME: fig-uninit-cap-concept
   [[../../figures/original-cap-representation.png]]
   \FloatBarrier
   
   The important fields of a capability for our proposal are the permissions, cursor, base and
   length fields. In our formal representation of capabilities we have an /end/ field instead of
   /length/ but it should be straightforward to see that $end = base + length$.
   
   The CHERI ISA extension is implemented for the MIPS ISA (CHERI-MIPS) and has a functional
   hardware implementation. Our proposals to instruction modifications/additions have been
   implemented for CHERI-MIPS in software (using a simulator) but are not limited to CHERI-MIPS.
   The concept of uninitialized capabilities aims to become part of the CHERI protection model,
   regardless of the architecture it is run on.

** Uninitialized Capabilities Implementation
*** Uninitialized Permission Bit
    The first modification that needed to be made to CHERI capabilities is the addition of a new
    permission, the uninitialized permission. In the 256-bit capability format there are a few 
    unused bits (padding bits) available so we have opted to use one of those bits for the 
    uninitialized permission.

    #+CAPTION: Modified 256-bit representation of a capability
    #+ATTR_LATEX: :width 0.8\textwidth
    #+NAME: fig-uninit-cap-concept
    [[../../figures/uninit-cap-representation.png]]
    \FloatBarrier
    
*** Instruction Modifications
    A few instruction were modified to take the uninitialized permission into account. What follows
    is a list of the instructions modified and a description of what that modification entails:

    \bigskip
    @@latex:\noindent@@
    *Load via Capability Register (CL[BHWD][U]/CLC)*: When load instructions are given a capability
    with the uninitialized permission set, it should not be allowed to load from an address lower
    than the cursor.

    \bigskip
    @@latex:\noindent@@
    *Set/Increment Offset (CIncOffset/CGetOffset/CIncOffsetImmediate)*: Instructions that modifiy 
    the cursor of an uninitialized capability should not allow it be set lower than it originally 
    was. The only way of lowering the cursor should be by using the uninitialized store instructions.

*** New Instructions
    We propose 2 new instructions for the implementation of uninitialized capabilities:

    \bigskip
    @@latex:\noindent@@
    *Uninitialize a Capability (CUninit)*: An instruction to make a capability uninitialized.
    This instruction takes a source capability register and a destinitation capability register that
    will contain the capability from the source register but with the uninitialized permission set.

    \bigskip
    @@latex:\noindent@@
    *Uninitialized Store (UCS[BHWD]/UCSC)*: These instructions are modified versions of their
    not-uninitialized counterparts (CS[BHWD], CSC). Using these store instructions behaves similar to the normal
    store instructions, except when the given offset is 0. In that case it will decrement the
    cursor of the capability. The data of the source register will then be written on the address
    using the decremented cursor. The uninitialized capability with the decremented cursor will be written
    to the given destination capability register. This is the only way to decrement the cursor of
    uninitialized capabilities.
    This instruction takes 4 arguments, a destination capability register (which will contain
    the source capability but possibly with its cursor modified if the offset was 0), a source 
    register for the data to write, an offset and a source capability register.
