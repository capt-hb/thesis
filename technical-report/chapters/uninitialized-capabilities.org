* Uninitialized Capabilities
  Uninitialized capabilities are a new type of capabilities, which represent the authority to
  only read those parts of memory to which has been written first using the uninitialized
  capability. This type of capability requires a new permission to be added to capabilities 
  (*U*: uninitialized) and prevents the holder of the capability from reading memory that was not 
  initialized. Figure \ref{fig:uninit-cap-concept} clarifies this concept a bit more.

  #+CAPTION: Uninitialized Capabilities Concept
  #+ATTR_LATEX: :width 0.5\textwidth
  #+NAME: fig:uninit-cap-concept
  [[../../figures/uninit-cap-concept-v2.png]]
  \FloatBarrier

  Formally, uninitialized capabilities grant the following authority:
  - permission to read in $[cursor, end]$;
  - permission to write in $[base, end]$;
  - when writing on the cursor, the cursor will be decremented so that the holder of the 
    uninitialized capability is able to read from the location it has just written to.
   
  Uninitialized capabilities can thus be used to gives access to arrays that contain uninitialized 
  data without the need of clearing that uninitialized data.
  
  The full set of permissions becomes:
  - *R*: read-only;
  - *RW*: read-write;
  - *RX*: read-execute;
  - *RWX*: read-write-execute.
  - *U*: read between $[cursor, end]$, write between $[base, end]$;
    
  We have chosen not to include combinations of the *U* permission and *X* permission. 
  Executing an uninitialized capabilities would require
  incrementing the program counter (and thus the cursor of the uninitialized capability),
  which means that the non-readable range of the capability would grow.
  Another option is to allow the combination of the *U* permission with the *X* permission, 
  but when jumping to an uninitialized capability transform it into a normal capability for
  the range $[cursor, end]$ before placing it in the program counter register.

  We provide a concrete implementation of uninitialized capabilities for the /CHERI/ capability 
  machine.

** CHERI
   CHERI (\textbf{C}apability \textbf{H}ardware \textbf{E}nhanced \textbf{R}ISC \textbf{I}nstructions) 
   is an ISA extension that introduces capabilities. The main goals of CHERI are 
   fine-grained memory protection, software compartmentalization and backwards compatibility \parencite{watson2019capability}.
   
   The CHERI ISA extension proposes a 64-bit, 128-bit and 256-bit capability representation format \parencite{watson2019capability}, 
   we have implemented our ideas for the 256-bit capability format but it should be possible to 
   add the uninitialized permission bit to other formats as well.
   
   In Figure \ref{fig:cap-256} we see the current 256-bit capability format:

   #+CAPTION: 256-bit Capability Representation Format
   #+ATTR_LATEX: :width 0.8\textwidth
   #+NAME: fig:cap-256
   [[../../figures/original-cap-representation.png]]
   \FloatBarrier
   
   The important fields of a capability for our proposal are the permissions, cursor, base and
   length fields. In our formal representation of capabilities we have an /end/ field instead of
   /length/ but it should be straightforward to see that $end = base + length$.
   
   The CHERI ISA extension is implemented for the MIPS ISA (CHERI-MIPS) and has a functional
   hardware implementation. Our proposals to instruction modifications/additions have been
   implemented for CHERI-MIPS in software (using a simulator) but are not limited to CHERI-MIPS.
   We see the concept of uninitialized capabilities as an addition to the CHERI protection model,
   regardless of the architecture it is run on.

** Uninitialized Capabilities Implementation
*** Uninitialized Permission Bit
    The first modification that needed to be made to CHERI capabilities is the addition of a new
    permission, the uninitialized permission. In the 256-bit capability format there are a few 
    unused bits (padding bits) available so we have opted to use one of those bits for the 
    uninitialized permission, as can be seen in Figure \ref{fig:uninit-cap-rep}.

    #+CAPTION: Modified 256-bit representation of a capability
    #+ATTR_LATEX: :width 0.8\textwidth
    #+NAME: fig:uninit-cap-rep
    [[../../figures/uninit-cap-representation.png]]
    \FloatBarrier
    
*** Instruction Modifications
    A few instruction were modified to take the uninitialized permission into account. What follows
    is a list of the instructions modified and a description of what that modification entails:

    \bigskip
    @@latex:\noindent@@
    *Load via Capability Register (CL[BHWD][U]/CLC)*: When load instructions are given a capability
    with the uninitialized permission set, it should not be allowed to load from an address lower
    than the cursor.

    \bigskip
    @@latex:\noindent@@
    *Set/Increment Offset (CIncOffset/CGetOffset/CIncOffsetImmediate)*: Instructions that modify 
    the cursor of an uninitialized capability should not allow it be set lower than it originally 
    was. The only way of lowering the cursor should be by using the uninitialized store instructions.

*** New Instructions
    We propose new instructions for the implementation of uninitialized capabilities:

    \bigskip
    @@latex:\noindent@@
    *Uninitialized a Capability (CUninit)*: An instruction to make a capability uninitialized.
    This instruction takes a source capability register and a destination capability register that
    will contain the capability from the source register but with the uninitialized permission set.

    \bigskip
    @@latex:\noindent@@
    *Uninitialized Store (UCS[BHWD]/UCSC)*: These instructions are modified versions of their
    not-uninitialized counterparts (CS[BHWD], CSC). Using these store instructions behaves similar to the normal
    store instructions, except when the given offset is $-1$. In that case, the capability
    written to the destination capability register will have the cursor of the source capability 
    decremented by the number of bytes written (i.e. 1 for a byte, 2 for a half word, 4 for a word,
    8 for a double word and 32 for capabilities when using the 256-bit capability format). 
    Specifying an offset of $-1$ is the *only* way to decrement the cursor.
    This instruction takes 4 arguments, a destination capability register (which will contain
    the source capability but possibly with its cursor modified if the offset was $-1$), a source 
    register for the data to write, an offset and a source capability register.

    \bigskip
    The original store instructions for capabilities are *not* modified (CSC, CSW, ...), but instead 
    we propose to add new instructions to handle the uninitialized permission. The new instructions
    write to a capability register the possibly modified capability (if it has the *U* permission
    set and the given offset is $-1$), while the original instructions do not write to a register but
    instead allow specifying a register containing another offset to be added to the cursor of the
    capability.

    One additional instruction is required to modify the bounds of uninitialized capabilities:

    \bigskip
    @@latex:\noindent@@
    *Shrink a Capability (CShrink[Immediate])*: CShrink is an instruction with 3 parameters, the destination
    capability register, the source capability register and a general-purpose register (GPR) ,or alternatively
    an unsigned immediate for CShrinkImmediate. The capability from the source register will be 
    modified by setting $end = cursor$ and $base = value\ in\ GPR$ for CShrink. For CShrinkImmediate
    $end = cursor$ and $base = base + immediate$. CShrink[Immediate] will raise an exception if the
    $end < cursor$ (the original $end$ and $cursor$ of the capability) or if $newBase < base$, 
    these conditions prevent expanding the range of authority of the capability.
    
    \bigskip
    In the CHERI-MIPS ISA a similar instruction is already available, *CSetBounds*, but this 
    instruction did not meet the needs of uninitialized capabilities. It adjusts the bounds
    by setting $base = cursor$ and $end = cursor + immediate$, where immediate is either the value
    from the general-purpose register specified in the instruction or an unsigned immediate value.
    
    The issue with using this instruction in combination with uninitialized capabilities arises
    when trying to lower the $end$ of the uninitialized capability, but maintain the same $base$.
    Using CSetBounds this would require first setting $cursor = base$, calculate the offset
    for the new $end$, perform the CSetBounds instruction and then setting the $cursor$ back
    to its value before it was set to $base$. This obviously means lowering the cursor ($cursor = base$)
    which is not permitted for uninitialized capabilities.
