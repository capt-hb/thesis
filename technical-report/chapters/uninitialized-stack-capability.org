* Secure Calling Convention
  In the paper "Reasoning About a Machine with Local Capabilities" \parencite{skorstengaard2018reasoning},
  a novel calling convention is proposed by using local capabilities. This calling convention ensures
  local stack frame encapsulation and well bracketed control flow on a single shared stack. 
  We propose to continue using this calling convention with the slight modification that the stack
  capability should be made uninitialized on function invocation.
  
  The calling convention \parencite{skorstengaard2018reasoning} mentions as a point of improvement
  to the calling convention the need for an instruction for efficiently clearing a large part of 
  memory. Uninitialized capabilities can be used to prevent this overhead of clearing 
  (by making the stack capability uninitialized). 
  Note that it is still necessary that a callee clears its used stack frame.

  Having an uninitialized stack capability prevents adversaries from reading from the stack unless they first 
  overwrite the uninitialized data (this could be garbage but also sensitive data or capabilities that they should not get access to).
  See Figure \ref{fig:uninit-stack} for a conceptual diagram of having an uninitialized stack
  capability.

  #+CAPTION: Stack with Uninitialized Capability
  #+ATTR_LATEX: :width 0.8\textwidth
  #+NAME: fig:uninit-stack
  [[../../figures/cheri-uninit-stack.png]]
  \FloatBarrier
