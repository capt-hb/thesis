* Secure Calling Convention
  In the paper "Reasoning About a Machine with Local Capabilities"\parencite{skorstengaard2018reasoning},
  a novel calling convention is proposed by using local capabilities. This calling convention ensures
  local stack frame encapsulation and well bracketed control flow on a single shared stack. 
  We propose to continue using this calling convention with the slight modification that the stack
  capability should also be uninitialized.
  
  The calling convention\parencite{skorstengaard2018reasoning} mentions as a point of improvement
  to the calling convention the need for an instruction for efficiently clearing a large part of 
  memory. Uninitialized capabilities can be used to prevent this overhead of clearing 
  (by making the stack capability uninitialized). 
  Note that it is still necessary that a callee clears its used stack frame.

  Having an unintialized stack capability prevents adversaries from reading from the stack before 
  overwriting the uninitialized data (this could be garbage but just as well sensitive data):

  #+CAPTION: Stack with Uninitialized Capability
  #+ATTR_LATEX: :width 0.8\textwidth
  [[../../figures/cheri-uninit-stack.png]]
  \FloatBarrier
