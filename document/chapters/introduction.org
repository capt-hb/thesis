* Introduction
  Capability machines are a special type of processors. Instead of having traditional pointers,
  capability machines offer capabilities to interact with memory. Capabilities are unforgeable
  tokens that carry authority to access memory or an object. Conceptually we can view capability
  machines as a set of permissions, a base address, an end address and a cursor (these denote the
  range of authority of the capability). While capability machines were an active topic of research
  decades ago \parencite{levy2014capability}, the research interest into capability machines has
  grown again by merit of a recently developed capability machine, CHERI
  \parencite{watson2019capability}. One of the biggest interests in capability machines stems from the
  security primitives they offer. Because capabilities have permissions and a range of authority,
  they seem promising to improve the security of processors and operating systems. There have been
  two recent proposals for alternative calling conventions that are more secure, one using local
  capabilities \parencite{skorstengaard2018reasoning} and a calling convention using linear
  capabilities \parencite{skorstengaard2019stktokens}. The calling convention using local
  capabilities had a considerable overhead regarding stack clearing and the calling convention with
  linear capabilities doesn't seem trivial to implement in hardware
  \parencite[Appendix~D.10]{watson2019capability}. Local capabilities however, have been
  implemented in capability machines.

  This thesis focuses on alleviating the stack clearing overhead by introducing a new kind of
  capability: /uninitialized capabilities/. Uninitialized capabilities prohibit the holder from
  reading contents from memory to which it has not first written, a only-read-after-write
  semantics. Having the stack capability be a local and uninitialized capability would still give it
  the advantages of the calling convention with local capabilities and it would get rid of the need
  to clear the unused part of the stack when an invoked function returns. An adversary (an untrusted
  piece of code trying to perform malicious actions) can save a capability in its stack frame and
  return control to its caller, but because the stack capability is uninitialized, when another
  adversary is called and tries to access that capability, it can only do so after overwriting it
  with something else and is thus unable to access that capability.
  
  The first contribution of this thesis is the semantics of uninitialized capabilities (Section
  [[sec:uninit-caps]]). Then an implementation of uninitialized capabilities is given for CHERI-MIPS in
  software (using a simulator). The modifications made to existing instructions (store
  instructions, load instructions and instructions modifying the cursor of a capability) are
  explained and new instructions are described in detail. These new instructions entail separate
  store instructions for uninitialized capabilities, an instruction to make a capability
  uninitialized and an instruction that can shrink the range of authority of a capability (similar
  to an already existing instruction). These instructions have been tested and work as intended.

  The thesis then focuses on describing a calling convention with both local and uninitialized
  capabilities (Section [[sec:secure-cc]]). The calling convention is explained and assembly code is
  given to show how the different parts of the calling convention can be achieved in assembly code
  for CHERI-MIPS. The modifications to the assembler of the LLVM project are described (Section
  [[sec:assembler]]), which is used later on in the thesis to evaluate the modified and new instructions
  for their intended behavior and to test that the new calling convention preserves the semantics of
  the original program (written in C), in Section [[sec:evaluation]]. The tests for the calling
  convention consist of two assembly files, one using the original calling convention and one in
  which the calling convention is modified to be the one described in the thesis (using local and
  uninitialized capabilities).

  An evaluation is performed to quantify the difference in the number of instructions when using the
  original calling convention and the calling convention described in this thesis. This resulted in
  the observation that using the secure calling convention doubles the number of instructions. The
  increase in instructions depends on the size of the stack frames, which need to be cleared before
  a function returns to its caller and larger stack frames result in more clearing, i.e. more
  instructions to clear the stack. The execution time of the original calling convention and secure
  calling convention is compared too, showing that there is an expected overhead due to the clearing
  requirements of the secure calling convention. This overhead depends on the stack frame sizes of
  functions, the bigger the stack frame, the more clearing is required before returning the caller
  of the function (functions are required to clear their own used stack frame before returning).
  
  After the evaluation, Section [[sec:clang]], is devoted to discussing the implementation of the calling
  convention in the CLang/LLVM compiler. This exploration outlines the different parts of the
  compiler that need to be modified to use the new calling convention. This was not implemented due
  to time restrictions but the exploration will surely be useful for future work that implements
  this calling convention or when a new calling convention needs to be added in the CLang/LLVM compiler.

  The calling convention is successfully implemented on CHERI-MIPS by manually modifying assembly
  programs. There is still some overhead due to clearing the stack frames of functions, but this
  overhead is considerably smaller than in the calling convention with only local capabilities, in
  which the unused part of the stack has to be cleared as well. The implementation of the calling
  convention in the CLang/LLVM compiler is only explored in this thesis and the actual
  implementation remains to be done in future work.

  The results of this thesis are also part of a paper that will be submitted to
  POPL21[fn:popl21]. This paper is the result of a collaboration between the Vrije Universiteit
  Brussel and Aarhus University, Denmark. The paper describes uninitialized capabilities and the
  calling convention on a different capability machine (simpler than CHERI and it has enter
  capabilities). The paper theoretically underpins the calling convention and its guarantees 
  regarding well-bracketed control flow and local state encapsulation by proving that an
  implementation of the awkward example (a program that depends on well-bracketed control flow)
  is correct.
  
[fn:popl21] https://popl21.sigplan.org/
