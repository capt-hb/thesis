* Calling Convention Using Local Capabilities
  <<sec:lau-cc>>
  The calling convention described in this section is the one defined by Skorstengaard et al.\parencite{skorstengaard2018reasoning}
  It makes use of local capabilities, which are capabilities that can only be kept in registers except
  for when you have a capability with the write-local permission. This requires that capabilities
  have a new permission added, the *L* (Local) permission and the possible combinations for this
  permission are *RWL* and *RWLX*.
  
  An important requirement for this calling convention is that the stack capability is a local
  capability with the *RWLX* permission.
  
** Invoking A Function
   The first thing to do is to save the used caller-saved registers on the stack.    

   # TODO: skorstengaard2018reasoning contains a nice figure for this, insert + cite!
   As a return capability for the callee we need to create an enter capability (a permissions that
   cannot be used to read, write or execute and a capability with this permissions cannot be modified 
   but they can be jumped to and when jumped to their permission becomes *RX*). To create this
   enter capability we will store the restore instructions on the stack and after these instructions
   our return capability and stack capability. 
   We then create the local enter capability for the restore instructions, return and stack capability.
   The restore instructions will restore the return and stack capability.
   
   Now we can also restrict the stack capability to only cover the unused part of the stack.
   We need to clear this unused part because it may contain data and capabilities left there
   by previously executed code. Any non-argument registers are also cleared.

   After this setup is done a jump can be made to the function. A check is required if the 
   jump is done using a function pointer (for example callbacks), to see if that function pointer 
   is global (i.e. not local). If this check fails then the function invokation fails.
   
   When the callee returns using the given enter return capability it will execute the restore
   instructions, after which we can remove the return and stack capability from the stack, as well
   as the restore instructions. All that's left is to restore our caller-saved registers from the 
   stack.

** Argument Passing
   The calling convention is similar to standard C calling conventions, so it is safe to assume
   that much like other calling conventions the first $x$ arguments are passed in registers and
   the remaining arguments are passed on the stack.
   This part of the calling convention relies on the processor on which it is used. 

** Returning From A Function
   Returning from a function happens by jumping to the return capability. This return capability
   is an enter capability that will restore the stack and return capability for the caller and
   continue by restoring caller-saved registers.

** Function Prologue
   # all non-argument registers are cleared, so nothing left to spill when jumping to a function?
   # (return/stack cap are spilled as part of the "Invoking a Function" process)
   The callee needs to check that the stack capability is *RWLX*. The necessary stack setup happens 
   by the caller instead of by the callee.

** Function Epilogue
   The following steps should be taken before jumping to the return capability:
   - clear the non-return value registers;
   - clear the used part of the stack (spilled registers, local state from invoking other functions, ...);
   - clear the unused part of the stack.
     
   The unused part of the stack needs to be cleared because if this function invoked adversary code
   it could be possible that data has been stored in the unused part of the stack. This data could
   be an old stack capability or return capability which could then be used later on, for example
   to get access to a part of the stack it should not be able to access (in the case of storing an
   old stack capability).
   # TODO: mention what an adversary is in the introduction
   
