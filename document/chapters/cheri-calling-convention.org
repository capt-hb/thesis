* CHERI-MIPS Calling Convention
  <<sec:cheri-cc>>
  This section describes the calling convention used in CHERI-MIPS (for the purecap ABI), which
  is similar to the MIPS-N32/N64 calling convention\parencite[section~4.11]{watson2019capability}. The CHERI ISAv7 
  technical report mentions the capability register conventions used in the calling convention
  in Section 4.11\parencite{watson2019capability}. The remaining information for the CHERI-MIPS 
  calling convention can be found by consulting the MIPSPro\texttrademark{}  N32 ABI Handbook\parencite{pirocanac2002},
  the MIPS Assembly Language Programmer's Guide\parencite{solmi1992} and the, for CHERI modified, 
  LLVM compiler[fn:llvm] in the /MIPS/ backend.
  It should be noted that the calling convention will be described without using the frame pointer.
  The general-purpose registers (GPR) are denoted as ~$<num>~ and capability registers as ~$c<num>~.
  
** Invoking A Function
   Invoking a function happens by jumping to it, using the /CJALR/ (capability jump and link register),
   which takes 2 operands, the capability register containing the capability to jump to and a 
   capability register to link the return (which will be a capability for the current PC + 8).
   
   Before being able to invoke a function it is necessary to create a capability that points
   to the code of the function we want to call.
   The first thing to do is get a pc-relative address for the Global Offset Table (GOT), this
   is done by using the following instruction sequence:
   #+ATTR_LATEX: :options frame=single
   #+begin_src cherimips -n
   lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
   daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
   cgetpccincoffset $c1, $1
   #+end_src
   
   All that's left now is to create an entry point capability for the function we need:
   #+begin_src cherimips -n
   # replace fn_symbol_name with the name of the function to jump to
   clcbi $c12, %capcall20(fn_symbol_name)($c1) 
   #+end_src
   
   Before we jump to the capability for the function we want to call, any caller-saved registers that
   we use need to be pushed on the stack.
   
   In CHERI-MIPS $c12 is used as the entry point capability and $c17 as the return point capability,
   consequently jumping to a function will always look like ~cljar $c12, $c17~.
   
   When the function returns we need to restore the caller-saved registers. The caller-save registers
   are /$c11-16, $c25/.

** Argument Passing
   # NOTE: the calling conv is CC_MipsN (cc_mipsn_fast starts with $c1, but the first cap arg
   # is passed in $c3, see stack_growth.s)
   The argument passing follows the MIPS calling convention rules, in which the first eight integer
   arguments are passed in the registers $4-11. The first eight capability arguments are passed in 
   registers $c3-10. All other arguments are passed on the stack.
   
** Returning From A Function
   In order to return from a function a jump instruction is used with as operand a capability
   to return to. For CHERI-MIPS this is the /CJR/ instruction (jump capability register) and
   the capability to return to is in capability register 17 (/$c17/).
   
** Function Prologue
   The function prologue describes what needs to happen at the beginning of a function.

   The following steps describe the function prologue for CHERI-MIPS:
   - Adjust the stack capability by decreasing the offset with the size of the stack frame
     (i.e. push stack frame);
   - Spill the callee saved registers onto the stack.

   # see CSR_Cheri_Purecap in MipsCallingConv.td (with MipsRegisterInfo.td for more reg info)
   # NOTE: caller-saved registers are all registers except the callee saved ones
   The callee saved registers are: /$16-23, $28, $30-31, $c17-25/.

** Function Epilogue
   The function epilogue describes what needs to happen at the end of a function.
   The epilogue undoes the setup of the stack frame by the prologue:
   - Increase the offset of the stack capability with the stack frame size (i.e. popping the
     stack frame);
   - Restoring the callee saved registers.

[fn:llvm] https://github.com/CTSRD-CHERI/llvm-project
