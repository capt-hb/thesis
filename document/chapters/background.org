* Background
  This background section provides the reader with the required knowledge regarding capability machines,
  CHERI and the calling conventions studied as a basis for the contribution of the thesis. 
  It is recommended to read the background, capability machines are not part of the standard
  knowledge of computer scientists but are the main focus point of the thesis. 

** Capability Machines
   Capability machines are a special type of processor that replaces pointers with capabilities.
   Conceptually, capabilities are tokens that carry authority to access memory or an object. When
   capabilities represent software defined authority like invoking objects or closures, they are
   referred to as /object capabilities/.
   This thesis will focus on primitive capabilities for accessing memory.
   The permissions to access memory can be read only, read only and write to, execute, ... 
   The idea of capabilities was first formally defined by Dennis and Van Horn \parencite{dennis1966programming} 
   and has been further explored in the decades after. 

   The first capability machine dates back from 1959 with the /Rice University Computer/ and the 
   development and research interest of capability machines slowed down significantly after the 
   /iAPX 432/ from /Intel/ in 1981 \parencite{levy2014capability}. 
   In 2014, researchers of the University of Cambridge developed a new 
   capability machine: /CHERI/, on which I will provide an implementation of the contribution of
   this thesis to capability machines.
  
   It is important that capabilities cannot be forged, as forging them with certain permissions, 
   memory bounds, etc. would defeat their purpose. One of the solutions to
   ensure the unforgeability of capabilities is to provide specialized instructions to work
   with capabilities. Capabilities might however need to be stored in primary memory or
   secondary memory instead of just the registers on the processor and one of the most used 
   techniques to ensure valid capabilities is the use of tagged memory \parencite{fabry1974capability}. 
   Every possible capability location will have a tag denoting if that location contains a capability 
   or not. Capabilities for which the tag is not set cannot be used to dereference memory.

   Some common permissions found on capability machines are:
   - *R*: read-only;
   - *RW*: read, write;
   - *RX*: read, execute;
   - *RWX*: read, write, execute.

   Capabilities can be formally represented by a 4-tuple similar to the
   representation used by Skorstengaard et al. \parencite{skorstengaard2018reasoning}, 
   (/permissions/, /base/, /end/, /cursor/), this tuple contains the 
   /permissions/ of the capability, the range to which these permissions apply /[base, end]/ and 
   a /cursor/ in that range. 
   An advantage of capabilities over pointers is that they carry permissons and bounds to access
   memory, whereas a pointer is just a number indicating a memory address with no restrictions,
   this means that capabilities require more bits than pointers.
   Furthermore, the semantics of the C programming language regarding pointers often specifies
   /undefined/ behavior, for example when performing out-of-bounds pointer arithmetic \parencite{memarian2019exploring}.
   The behavior of capabilities is better defined as it can be deducted from the permissions and range
   of authority it has. If the cursor of the capabilities goes out-of-bounds then it cannot be used
   to dereference that address.
   
   The following two sections describe two kinds of capabilities that will be used later in the thesis.
   
*** Local Capabilities
    Capabilities can be either /global/ or /local/. Global capabilities correspond to the 
    capabilities explained above and can be stored by both global and local capabilities that have
    the write permission. 
    The new kind of capability is the /local/ capability, which
    behaves different for storing local capabilities. Local capabilities can only be stored
    into memory by using a capability that is local itself and has the write-local permission \parencite[sec~2.3.10]{watson2019capability}.

*** Sealed Capabilities
    <<sec:sealed-capabilities>>
    One more kind of capability that is of interest for this thesis is the use of /sealed/ capabilities.
    A sealed capability is immutable and cannot be used to read or write to memory.
    If one wants to use a sealed capability or modify it, it must first be unsealed. Unsealing a
    sealed capability can only be done by using the same seal by which it was sealed.
   
** CHERI 
   CHERI (\textbf{C}apability \textbf{H}ardware \textbf{E}nhanced \textbf{R}ISC \textbf{I}nstructions) 
   is an ISA extension that introduces capabilities. The main goals of CHERI are 
   fine-grained memory protection, software compartmentalization and backwards compatibility \parencite{watson2019capability}.
   
   The CHERI ISA extension proposes a 64-bit, 128-bit and 256-bit capability representation format \parencite{watson2019capability}, 
   this thesis will focus on the 256-bit capability format but the ideas and concepts represented
   in the thesis should be applicable to the other capability formats as well.
   
   Figure \ref{fig:uninit-cap-concept} shows the current 256-bit capability format.

   #+CAPTION: 256-bit Capability Representation Format
   #+ATTR_LATEX: :width 0.8\textwidth
   #+NAME: fig:cap-representation
   [[../../figures/original-cap-representation.png]]
   \FloatBarrier
   
   The important fields of a capability used throughout the thesis are the permissions, cursor, base and
   length fields. In our formal representation of capabilities we have an $end$ field instead of
   $length$ but it should be straightforward to see that $end = base + length$.
   
   The CHERI ISA extension is implemented for the MIPS ISA (CHERI-MIPS) and has a functional
   hardware implementation. 
   
*** Sealed Capabilities
    <<sec:cheri-sealed-capabilities>>
    The definition of sealed capabilities was given in Section [[sec:sealed-capabilities]]. This section
    will explain how CHERI supports sealed capabilities.
    
    Unsealed capabilities have an /otype/ (see Figure \ref{fig:cap-representation} of -1, which is
    the default for all capabilities. A capability can be sealed by using the /CSeal/ instruction,
    which is of the form: ~cseal cd, cb, ct~. $cb$ contains the capability to be sealed and the
    sealed capability will be written to $cd$. The seal itself is taken from the capability residing
    in $ct$, more specifically, the 24 least significant bits of the cursor of $ct$.
    This cursor is not allowed to be greater than the maximum otype (which is
    $2^24 - 1 - 16$, the $- 16$ subtracts the reserved otypes that have a special meaning
    and cannot be used as a normal seal). The cursor itself also needs to be in the bounds
    of the capability used for sealing ($ct$). If these conditions are not met than an exception
    is raised (some other conditions apply too but are irrelevant for the discussion here).
    The /otype/ of a capability is transparent and can be requested by using the /CGetType/
    instruction \parencite[Section~8.10]{watson2019capability}.
    
    I will discuss two options to unseal a capability. The first option to unseal a sealed 
    capability is by using the /CUnseal/ instruction, of the format ~cunseal cd, cb, ct~ which is
    similar to the CSeal instruction.
    The second option, the one that will be used later in the thesis, is using the /CCall/ instruction.
    CCall is of the format ~ccall cs, cb, selector~ (selector is an 11-bits constant), CHERI 
    currently supports two selectors, the only selector used throughout the thesis is $selector = 1$,
    for more details about CCall using $selector = 0$, refer to the CHERI technical report \parencite[page~181]{watson2019capability}.
    Both capabilities in registers $cs$ and $cb$ will be unsealed, but only if they *both* have the
    same seal. Furthermore, $cs$ should be a capability with the execute permission and $cb$ should
    not have the execute permission set. $cs$ will be placed in the program counter capability register (PCC)
    and $cb$ in the invoked data capability register (IDC).
    
    CCall thus takes a pair of sealed capabilities, a code capability and a data capability and will
    unseal the pair and place the code capability in the PCC (i.e. jumping to it) and places the
    data capability in the IDC.
    
** Calling Convention
   This section will describe what a calling convention is. The next 2 sections discuss 2 specific calling
   conventions, the calling convention being used on CHERI-MIPS and a secure calling convention
   on a theoretical capability machine.

   \bigskip
   
   A calling convention is a set of guidelines for \parencite{solmi1992}: 
   - how to use the registers available on a processor;
     + how many arguments are passed in registers and which registers are used for the arguments;
     + in which register(s) the return value(s) will reside;
   - what needs to happen before calling a function;
   - what needs to happen after a function returns to its caller;
   - the prologue of a function.
   - the epilogue of a function;
     
   This definition of calling conventions will be used throughout the thesis to describe calling 
   conventions.

#+INCLUDE: ./cheri-calling-convention.org :minlevel 2

#+INCLUDE: ./lau-calling-convention.org :minlevel 2
